---
alwaysApply: true
---

# Cursor 全域規範（本專案專用，Agent 必讀）

## API 與錯誤（全域）
- 新介面一律使用 `/api/v1`；舊端點保留相容期
- 回應格式：`{ success, code, message, data }`
- 錯誤碼：UNAUTHORIZED/FORBIDDEN/NOT_FOUND/CONFLICT/VALIDATION_ERROR/INTERNAL_ERROR

## 後端約定（全域）
- 新增路由放入 `/api/v1/*`（可先轉接既有 controller，再逐步統一回應）
- 變更密碼：提供 `PUT /api/v1/auth/change-password`（非強制，登入流程不鎖操作）
- 安全：`helmet`、`express-rate-limit`（`/auth/*`, `/queue/register`）、CORS 限定
- 日誌：`morgan`（dev/combined），未來改為結構化 JSON

## 前端約定（全域）
- `API_VERSION = 'v1'`（切換時統一 `/api/${API_VERSION}`）；`services/*` 一律回傳 `data`（如無 `data` 欄位則回傳原物件）
- 變更密碼為管理員可選操作，不在登入後強制彈窗
- 拆分巨型頁為元件與 hooks；表單驗證抽 schema

## 文件與提交（全域）
- 每次功能變更同步更新 `docs/PRD.md`（背景/AC）與 `docs/API_SPEC.md`
- **文檔同步工作流**：當 `docs/TODO.md` 任務狀態變更時，同步更新 `README.md` 的相關功能說明。特別是新功能開發或重構完成時，確保 README 反映最新的系統狀態。
- **需求開發流程**：新需求必須先在 `docs/PRD.md` 進行規劃與溝通確認後，再進行技術開發（API 設計、實作、測試）。Agent 須先更新 PRD 並等待確認，再執行後續開發任務。
- **任務確認機制**：TODO.md 任務標記完成前，需等用戶確認實際效果滿足需求，避免過早標記完成。
- PR 必附：變更摘要、驗收清單、回滾方式
  - 工程規範全文：即本檔（取代 `docs/ENGINEERING_RULES.md`）
  - 子領域規範：`backend-rules.mdc`、`frontend-rules.mdc`（位於 `.cursor/rules/`）

## To-Do 單一來源（全域）
- 所有重構任務以 `docs/TODO.md` 為權威清單，並同步到 Cursor 的 To-Do。
- Cursor/Agent 執行時，先讀 `docs/TODO.md` 確認當前任務，再動手改。

## 檔案定位與探索指南（Agent 必讀）
### 🔍 初次接觸或不熟悉功能時的探索順序：
1. **需求了解**：`docs/PRD.md` → 了解功能背景與驗收條件
2. **API 規格**：`docs/API_SPEC.md` → 確認端點、請求/回應格式
3. **前端入口**：`frontend/src/pages/*` → 找到頁面主要元件
4. **後端入口**：`backend/src/routes/v1/*` → 找到對應路由與控制器

### 📂 關鍵檔案速查表：
**前端核心結構：**
- 頁面：`frontend/src/pages/` (AdminDashboardPage, RegisterPage 等)
- 元件：`frontend/src/components/` (按功能模組分組：admin/, registration/, common/, layout/)
- 狀態：`frontend/src/redux/slices/` (authSlice, queueSlice, adminSlice, uiSlice)
- 服務：`frontend/src/services/` (authService, queueService, adminService)
- Hooks：`frontend/src/hooks/` (useQueueManagement 及其拆分版本在 hooks/admin/)

**後端核心結構：**
- 路由：`backend/src/routes/v1/` (auth, queue, admin)
- 控制器：`backend/src/controllers/` (auth, queue, admin)
- 模型：`backend/src/models/` (user, queue)
- 中介層：`backend/src/middleware/` (auth, validation)
- 工具：`backend/src/utils/` (v1-response, validation)

### 🔎 常見問題的定位策略：
- **登入/認證問題**：authService → authSlice → auth.controller → user.model
- **候位功能問題**：queueService → queueSlice → queue.controller → queue.model
- **管理面板問題**：AdminDashboardPage → useQueueManagement → adminService → admin.controller
- **API 回應格式問題**：v1-response.js → 對應 controller → API_SPEC.md
- **前端元件問題**：從 pages/ 開始，追蹤到 components/ 和 hooks/
- **Socket 即時更新**：socketService → 對應元件的 useEffect → backend socket 事件

### 💡 探索技巧：
- 使用 `codebase_search` 進行語意搜尋，如「用戶登入流程」、「候位狀態更新」
- 使用 `grep` 精確搜尋函式名、變數名、錯誤訊息
- 從錯誤訊息或 console.log 開始反向追蹤
- 檢查 import/export 關係來理解檔案間的依賴

## ⚠️ 重要原則：優先使用現有功能（Agent 必讀）
### 🔍 **新功能開發前的必要檢查**：
**在創建任何新的參數、函式、API、組件或模型之前，必須先進行全面探索：**

1. **參數/設定檢查**：
   - 搜尋 `SystemSetting` 模型和相關 API
   - 檢查管理員面板的系統設定功能
   - 確認是否已有類似的配置參數

2. **API 端點檢查**：
   - 搜尋現有 `/api/v1/*` 端點
   - 檢查 `docs/API_SPEC.md` 文檔
   - 確認是否已有類似功能的 API

3. **函式/Hook 檢查**：
   - 搜尋現有的 utils/、hooks/、services/ 目錄
   - 檢查是否已有類似邏輯的實現
   - 優先擴展現有函式而非新建

4. **資料庫欄位檢查**：
   - 檢查現有 models/ 中的 schema 定義
   - 搜尋相關的資料庫欄位和索引
   - 確認是否可重用現有欄位

### 🚫 **禁止的行為**：
- 未檢查現有功能就直接建立新的 API 端點
- 未搜尋現有參數就建立新的系統設定
- 未查閱現有 schema 就新增資料庫欄位
- 未檢查現有 hooks/utils 就建立新的功能函式

### ✅ **正確的工作流程**：
1. **第一步**：使用 `codebase_search` 和 `grep` 全面搜尋現有功能
2. **第二步**：檢查 `docs/API_SPEC.md` 和模型定義
3. **第三步**：評估是否可以擴展現有功能
4. **第四步**：只有在確認沒有現有解決方案時才建立新功能
5. **第五步**：新功能必須遵循現有的命名和結構慣例

**記住：重用和擴展現有功能比建立新功能更重要！** 🎯

## 重構期間暫時規則（完成後可移除）
- 一律優先補齊 v1 端點與回應格式，舊端點保持相容，不做破壞性修改。
- 前端預設 `API_VERSION=v1`，如需回退以 `.env` 覆蓋。